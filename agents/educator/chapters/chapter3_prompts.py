# agents/educator/chapters/chapter3_prompts.py
# 챕터 3: 프롬프트란 무엇인가? 콘텐츠 생성

from typing import Dict, List, Any
from .base_chapter import BaseChapter


class Chapter3Prompts(BaseChapter):
    """챕터 3: 프롬프트란 무엇인가? 콘텐츠 생성 클래스"""
    
    def __init__(self):
        super().__init__()
        self.chapter_id = 3
        self.title = '프롬프트란 무엇인가?'
        self.objectives = [
            '프롬프트의 정의와 중요성 이해',
            '효과적인 프롬프트 작성 원칙 학습',
            '실제 프롬프트 작성 및 테스트 경험',
            '프롬프트 엔지니어링 기법 습득',
            '상황별 프롬프트 전략 수립',
            'ChatGPT API 연동 실습 환경 활용'
        ]
        self.key_concepts = [
            '프롬프트', 'LLM', 'ChatGPT', '명령어', '컨텍스트', 
            '프롬프트 엔지니어링', 'Few-shot', 'Zero-shot', 'Chain-of-Thought'
        ]
        self.examples = {
            'beginner': [
                '간단한 질문하기: "오늘 날씨 어때?"',
                '번역 요청: "Hello를 한국어로 번역해줘"',
                '요약 요청: "이 글을 3줄로 요약해줘"',
                '설명 요청: "인공지능을 초등학생도 이해할 수 있게 설명해줘"',
                '창작 요청: "고양이가 주인공인 짧은 동화 써줘"',
                '학습 도움: "수학 문제 풀이 과정을 단계별로 설명해줘"'
            ],
            'business': [
                '보고서 작성: "분기별 매출 보고서 초안 작성"',
                '이메일 작성: "고객 불만 처리 이메일 작성"',
                '아이디어 생성: "신제품 마케팅 전략 아이디어 10개"',
                '회의록 요약: "회의 내용을 요약하고 액션 아이템 추출"',
                '제안서 작성: "AI 도입 제안서 구조와 핵심 내용"',
                '고객 분석: "고객 피드백 데이터 분석 및 인사이트 도출"'
            ]
        }
    
    def get_chapter_template(self) -> Dict[str, Any]:
        """챕터 3 템플릿 반환"""
        return {
            'title': self.title,
            'objectives': self.objectives,
            'key_concepts': self.key_concepts,
            'examples': self.examples
        }
    
    def generate_section_title(self, objective: str, user_level: str) -> str:
        """섹션 제목 생성"""
        if user_level == 'low':
            # 친근한 제목
            title_map = {
                '프롬프트의 정의와 중요성 이해': '💬 프롬프트가 뭐길래?',
                '효과적인 프롬프트 작성 원칙 학습': '✍️ 좋은 프롬프트 작성법',
                '실제 프롬프트 작성 및 테스트 경험': '🧪 직접 프롬프트 만들어보기',
                '프롬프트 엔지니어링 기법 습득': '🔧 프롬프트 고급 기법',
                '상황별 프롬프트 전략 수립': '🎯 상황에 맞는 프롬프트',
                'ChatGPT API 연동 실습 환경 활용': '💻 실제로 사용해보기'
            }
        else:
            # 전문적인 제목
            title_map = {
                '프롬프트의 정의와 중요성 이해': '프롬프트 엔지니어링의 기초',
                '효과적인 프롬프트 작성 원칙 학습': '효과적인 프롬프트 설계 원칙',
                '실제 프롬프트 작성 및 테스트 경험': '프롬프트 작성 실습 및 최적화',
                '프롬프트 엔지니어링 기법 습득': '고급 프롬프트 엔지니어링 기법',
                '상황별 프롬프트 전략 수립': '비즈니스 시나리오별 프롬프트 전략',
                'ChatGPT API 연동 실습 환경 활용': 'API 기반 프롬프트 실습 환경'
            }
        
        return title_map.get(objective, objective)
    
    def generate_section_content(self, objective: str, key_concepts: List[str], 
                                user_type: str, user_level: str) -> str:
        """섹션별 콘텐츠 생성"""
        
        if '프롬프트' in objective and '정의' in objective:
            return self._generate_prompt_definition_content(user_level)
        elif '작성 원칙' in objective or '엔지니어링' in objective:
            return self._generate_prompt_principles_content(user_level)
        elif '실습' in objective or 'API' in objective or '테스트' in objective:
            return self._generate_prompt_practice_content(user_level)
        elif '기법' in objective:
            return self._generate_advanced_techniques_content(user_level)
        elif '상황별' in objective or '전략' in objective:
            return self._generate_situational_strategies_content(user_level)
        else:
            return f"{objective}에 대한 상세한 설명이 여기에 들어갑니다."
    
    def _generate_prompt_definition_content(self, user_level: str) -> str:
        """프롬프트 정의 콘텐츠"""
        if user_level == 'low':
            return """
프롬프트는 AI에게 주는 '명령어'나 '질문'입니다.

💬 **프롬프트란?**
- AI(ChatGPT 같은)에게 무엇을 해달라고 말하는 것
- 예: "오늘 날씨 어때?", "이메일 써줘", "이 글 요약해줘"

✨ **왜 중요한가요?**
- 프롬프트를 잘 쓰면 → AI가 더 좋은 답변을 해줘요
- 프롬프트를 대충 쓰면 → AI가 엉뚱한 답변을 할 수 있어요

📝 **좋은 프롬프트의 특징**
1. **명확하게**: "뭔가 써줘" ❌ → "회의 요약 이메일 써줘" ✅
2. **구체적으로**: "글 써줘" ❌ → "500자 블로그 글 써줘" ✅
3. **예시 포함**: "이런 식으로 써줘: [예시]"
4. **역할 부여**: "너는 친절한 선생님이야. 초등학생에게 설명해줘"
5. **단계별 요청**: "1단계: 요약, 2단계: 핵심 포인트 정리"

🎯 **실습 팁**
- 처음엔 간단하게 시작해보세요
- 결과가 마음에 안 들면 더 구체적으로 다시 물어보세요
- 다양한 방식으로 같은 질문을 해보세요
            """
        else:
            return """
프롬프트 엔지니어링은 LLM과의 효과적인 상호작용을 위한 핵심 기술입니다.

**프롬프트의 정의**
- Large Language Model(LLM)에 입력하는 텍스트 명령어
- 모델의 출력을 제어하고 원하는 결과를 얻기 위한 인터페이스
- 인간과 AI 간의 커뮤니케이션 브릿지 역할

**프롬프트의 중요성**
1. **출력 품질 결정**: 동일한 모델도 프롬프트에 따라 결과가 크게 달라짐
2. **효율성 향상**: 적절한 프롬프트로 원하는 결과를 빠르게 획득
3. **비용 최적화**: 효과적인 프롬프트로 API 호출 횟수 감소
4. **일관성 확보**: 표준화된 프롬프트로 일관된 결과 생성

**프롬프트 설계 원칙**
- **명확성**: 모호하지 않은 구체적 지시사항
- **맥락 제공**: 충분한 배경 정보와 예시
- **구조화**: 논리적 순서와 명확한 형식
- **제약 조건**: 출력 길이, 형식, 톤 등의 명시
- **역할 정의**: AI의 역할과 전문성 명시

**고급 프롬프트 기법**
1. **Few-shot Learning**: 몇 개의 예시를 제공하여 패턴 학습
2. **Chain-of-Thought**: 단계별 사고 과정 유도
3. **Role-based Prompting**: 특정 역할 부여 (전문가, 교사 등)
4. **Template-based**: 재사용 가능한 템플릿 구조 활용
            """
    
    def _generate_prompt_principles_content(self, user_level: str) -> str:
        """프롬프트 작성 원칙 콘텐츠"""
        if user_level == 'low':
            return """
좋은 프롬프트를 만드는 간단한 방법들을 알아볼까요?

📋 **기본 원칙**
1. **구체적으로 말하기**
   - 나쁜 예: "글 써줘"
   - 좋은 예: "고등학생을 위한 500자 과학 설명글 써줘"

2. **역할 정해주기**
   - "너는 친절한 선생님이야"
   - "너는 전문 요리사야"
   - "너는 여행 가이드야"

3. **형식 알려주기**
   - "목록으로 정리해줘"
   - "표로 만들어줘"
   - "단계별로 설명해줘"

4. **예시 보여주기**
   - "이런 식으로 써줘: [예시]"
   - "다음과 같은 형태로: [샘플]"

✨ **마법의 단어들**
- "단계별로", "자세히", "쉽게", "구체적으로"
- "예시를 들어서", "표로 정리해서"
- "초보자도 이해할 수 있게"

🎯 **연습 방법**
1. 간단한 질문부터 시작
2. 결과를 보고 더 구체적으로 수정
3. 다양한 방식으로 같은 내용 요청해보기
            """
        else:
            return """
효과적인 프롬프트 작성을 위한 체계적인 접근법을 살펴보겠습니다.

**프롬프트 구조 설계**

1. **컨텍스트 설정 (Context)**
   - 배경 정보 및 상황 설명
   - 목적과 목표 명시
   - 제약 조건 및 요구사항 정의

2. **역할 정의 (Role)**
   - AI의 전문성 영역 지정
   - 톤앤매너 및 커뮤니케이션 스타일
   - 관점 및 접근 방식 설정

3. **작업 명세 (Task)**
   - 구체적인 작업 내용
   - 입력 데이터 형식
   - 예상 출력 형태

4. **출력 형식 (Format)**
   - 구조화된 출력 요구사항
   - 길이 및 스타일 지정
   - 포함/제외 요소 명시

**고급 프롬프트 기법**

1. **Chain-of-Thought (CoT)**
   - 단계별 사고 과정 유도
   - "단계별로 생각해보자" 패턴 활용
   - 복잡한 문제 해결에 효과적

2. **Few-shot Learning**
   - 2-3개의 예시 제공
   - 입력-출력 패턴 학습 유도
   - 일관된 형식 보장

3. **Self-Consistency**
   - 동일한 문제를 다양한 방식으로 접근
   - 여러 답변 중 일관된 결과 선택
   - 신뢰성 향상

**비즈니스 적용 전략**
- **표준화**: 팀 내 공통 프롬프트 템플릿 구축
- **버전 관리**: 프롬프트 개선 이력 추적
- **성능 측정**: A/B 테스트를 통한 효과성 검증
- **지속적 개선**: 피드백 기반 프롬프트 최적화
            """
    
    def _generate_prompt_practice_content(self, user_level: str) -> str:
        """프롬프트 실습 콘텐츠"""
        if user_level == 'low':
            return """
이제 직접 프롬프트를 만들어보고 테스트해볼까요?

🧪 **실습 단계**
1. **간단한 프롬프트부터**
   - "안녕하세요! 자기소개 해주세요"
   - "오늘 날씨에 대해 알려주세요"

2. **점점 구체적으로**
   - "10살 아이에게 태양계를 설명해주세요"
   - "500자 이내로 건강한 아침식사 레시피 추천해주세요"

3. **역할을 부여해보기**
   - "당신은 친절한 도서관 사서입니다. 중학생에게 좋은 책을 추천해주세요"
   - "당신은 여행 전문가입니다. 제주도 2박3일 여행 계획을 세워주세요"

💡 **실습 팁**
- 결과가 마음에 안 들면 더 구체적으로 다시 물어보세요
- "왜 그렇게 생각하는지 설명해줘"라고 추가 질문해보세요
- 같은 질문을 다른 방식으로도 해보세요

🎯 **연습 문제**
1. 친구에게 AI를 설명하는 프롬프트 만들기
2. 맛있는 라면 끓이는 법 알려달라는 프롬프트 만들기
3. 스트레스 해소 방법 추천받는 프롬프트 만들기
            """
        else:
            return """
실제 ChatGPT API를 활용한 프롬프트 실습 환경을 구성하고 활용해보겠습니다.

**API 연동 실습 환경**

1. **기본 설정**
   - OpenAI API 키 설정
   - 요청 파라미터 구성 (temperature, max_tokens 등)
   - 응답 처리 및 오류 핸들링

2. **실습 시나리오**
   - 비즈니스 문서 생성
   - 데이터 분석 보고서 작성
   - 고객 서비스 응답 생성
   - 마케팅 콘텐츠 제작

**프롬프트 최적화 프로세스**

1. **초기 프롬프트 작성**
   - 기본 요구사항 정의
   - 간단한 버전으로 시작
   - 초기 결과 평가

2. **반복적 개선**
   - 결과 분석 및 문제점 파악
   - 프롬프트 구조 개선
   - 추가 컨텍스트 제공

3. **성능 측정**
   - 정확성, 관련성, 일관성 평가
   - 응답 시간 및 토큰 사용량 모니터링
   - 사용자 만족도 측정

**실전 활용 사례**

1. **문서 자동화**
   ```
   역할: 전문 비즈니스 라이터
   작업: 월간 매출 보고서 초안 작성
   입력: 매출 데이터, 주요 지표
   출력: 구조화된 보고서 형식
   ```

2. **고객 서비스**
   ```
   역할: 친절한 고객 서비스 담당자
   작업: 불만 처리 이메일 작성
   입력: 고객 불만 내용
   출력: 공감적이고 해결 지향적 응답
   ```

3. **창작 및 아이디어 생성**
   ```
   역할: 창의적 마케팅 전문가
   작업: 신제품 런칭 캠페인 아이디어
   입력: 제품 특징, 타겟 고객
   출력: 10개의 창의적 캠페인 아이디어
   ```

**품질 관리 및 검증**
- 결과물의 사실성 검증
- 브랜드 톤앤매너 일치성 확인
- 법적, 윤리적 문제 검토
- 지속적인 프롬프트 라이브러리 구축
            """
    
    def _generate_advanced_techniques_content(self, user_level: str) -> str:
        """고급 기법 콘텐츠"""
        if user_level == 'low':
            return """
프롬프트를 더 잘 쓸 수 있는 고급 기법들을 알아볼까요?

🔧 **Few-shot Learning (예시 학습)**
- AI에게 몇 개의 예시를 보여주고 패턴을 따라하게 하는 방법
- 예시:
  ```
  다음과 같은 형식으로 요약해줘:
  
  원문: "오늘은 비가 많이 왔다"
  요약: "강우"
  
  원문: "회의에서 새로운 프로젝트를 논의했다"
  요약: "프로젝트 회의"
  
  원문: "고객 만족도가 크게 향상되었다"
  요약: ?
  ```

🧠 **Chain-of-Thought (단계별 사고)**
- AI가 단계별로 생각하도록 유도하는 방법
- 예시: "단계별로 생각해보자. 먼저..."

🎭 **Role Playing (역할 연기)**
- AI에게 특정 역할을 부여하는 방법
- 예시: "당신은 경험 많은 요리사입니다. 초보자에게..."

💡 **실용 팁**
- 복잡한 문제일수록 단계별로 나누어 질문하세요
- 예시를 2-3개 정도 보여주면 효과적이에요
- 역할을 구체적으로 정해줄수록 좋은 답변을 받을 수 있어요
            """
        else:
            return """
고급 프롬프트 엔지니어링 기법을 통해 더 정교한 결과를 얻을 수 있습니다.

**Few-shot Learning 기법**
- 정의: 소수의 예시를 통해 원하는 패턴 학습 유도
- 구조:
  ```
  [컨텍스트 설명]
  
  예시 1: [입력] → [출력]
  예시 2: [입력] → [출력]
  예시 3: [입력] → [출력]
  
  실제 작업: [새로운 입력] → ?
  ```
- 장점: 일관된 형식과 품질 보장
- 적용 분야: 텍스트 분류, 형식 변환, 창작 작업

**Chain-of-Thought (CoT) 기법**
- 정의: 단계별 추론 과정을 명시적으로 유도
- 핵심 패턴: "단계별로 생각해보자", "먼저... 그 다음..."
- 변형 기법:
  - Zero-shot CoT: "단계별로 설명해줘"
  - Few-shot CoT: 예시에 추론 과정 포함
- 효과: 복잡한 문제 해결 능력 향상

**Self-Consistency 기법**
- 정의: 동일한 문제를 여러 방식으로 접근하여 일관성 확인
- 프로세스:
  1. 같은 문제를 다른 프롬프트로 여러 번 질의
  2. 결과들 간의 일관성 분석
  3. 가장 신뢰할 만한 답변 선택
- 활용: 중요한 의사결정, 사실 확인

**Tree of Thoughts 기법**
- 정의: 여러 사고 경로를 탐색하고 평가하는 방법
- 구조:
  1. 문제 분해
  2. 각 하위 문제별 다양한 접근법 생성
  3. 각 접근법 평가 및 선택
  4. 최적 경로 조합

**프롬프트 체이닝**
- 정의: 여러 프롬프트를 연결하여 복잡한 작업 수행
- 예시: 분석 → 요약 → 추천 → 실행 계획
- 장점: 각 단계별 최적화 가능, 오류 추적 용이

**메타 프롬프팅**
- 정의: 프롬프트 자체를 개선하는 프롬프트 작성
- 활용: "이 프롬프트를 더 효과적으로 만들려면?"
- 효과: 지속적인 프롬프트 품질 향상
            """
    
    def _generate_situational_strategies_content(self, user_level: str) -> str:
        """상황별 전략 콘텐츠"""
        if user_level == 'low':
            return """
상황에 따라 어떤 프롬프트를 써야 할지 알아볼까요?

📚 **공부할 때**
- "초등학생도 이해할 수 있게 [주제]를 설명해줘"
- "이 개념을 3가지 예시로 설명해줘"
- "이 내용을 문제로 만들어줘"

💼 **일할 때**
- "전문적인 톤으로 [내용]에 대한 이메일 써줘"
- "이 데이터를 분석해서 3가지 인사이트 찾아줘"
- "회의 안건을 정리해줘"

🎨 **창작할 때**
- "창의적이고 독특한 아이디어 10개 제안해줘"
- "이 주제로 재미있는 이야기 써줘"
- "브레인스토밍을 도와줘"

🔧 **문제 해결할 때**
- "이 문제를 단계별로 해결하는 방법 알려줘"
- "장단점을 비교해서 표로 만들어줘"
- "다양한 관점에서 이 상황을 분석해줘"

💡 **팁**: 상황에 맞는 역할을 정해주고, 구체적인 요청을 하면 더 좋은 결과를 얻을 수 있어요!
            """
        else:
            return """
비즈니스 시나리오별 최적화된 프롬프트 전략을 수립해보겠습니다.

**문서 작성 시나리오**
- 전략: 구조화된 템플릿 + 역할 정의
- 프롬프트 구조:
  ```
  역할: [문서 유형]에 특화된 전문 작성자
  목적: [구체적 목적과 대상]
  형식: [원하는 구조와 길이]
  톤: [비즈니스 상황에 맞는 톤]
  ```

**데이터 분석 시나리오**
- 전략: Chain-of-Thought + 구체적 분석 프레임워크
- 핵심 요소:
  - 분석 목적과 가설 명시
  - 데이터 해석 방향 제시
  - 비즈니스 임팩트 연결 요청

**고객 서비스 시나리오**
- 전략: 감정 인식 + 해결 중심 접근
- 프롬프트 패턴:
  ```
  상황: [고객 문의/불만 내용]
  목표: 고객 만족과 문제 해결
  제약: [브랜드 가이드라인, 정책]
  출력: 공감적이고 해결 지향적 응답
  ```

**창의적 작업 시나리오**
- 전략: 발산적 사고 + 수렴적 평가
- 단계별 접근:
  1. 브레인스토밍 프롬프트
  2. 아이디어 평가 프롬프트
  3. 실행 가능성 검토 프롬프트

**의사결정 지원 시나리오**
- 전략: 다각도 분석 + 구조화된 비교
- 분석 프레임워크:
  - SWOT 분석 요청
  - 리스크-베네핏 분석
  - 이해관계자 관점 고려

**프로젝트 관리 시나리오**
- 전략: 단계별 분해 + 실행 계획
- 핵심 구성 요소:
  - 목표와 제약 조건 명시
  - 우선순위 설정 기준
  - 리스크 관리 방안

**품질 관리 체크리스트**
- 목적 달성도: 원래 의도와 일치하는가?
- 실행 가능성: 실제 업무에 적용 가능한가?
- 일관성: 브랜드/조직 가치와 일치하는가?
- 완성도: 추가 정보 없이 이해 가능한가?
            """