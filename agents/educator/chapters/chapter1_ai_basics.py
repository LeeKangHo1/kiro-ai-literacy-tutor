# agents/educator/chapters/chapter1_ai_basics.py
# 챕터 1: AI는 무엇인가? 콘텐츠 생성

from typing import Dict, List, Any
from .base_chapter import BaseChapter


class Chapter1AIBasics(BaseChapter):
    """챕터 1: AI는 무엇인가? 콘텐츠 생성 클래스"""
    
    def __init__(self):
        super().__init__()
        self.chapter_id = 1
        self.title = 'AI는 무엇인가?'
        self.objectives = [
            'AI, ML, DL의 개념과 차이점 이해',
            'AI의 실생활 적용 사례 파악',
            'AI 기술의 한계와 가능성 인식',
            '약한 AI와 강한 AI의 구분',
            '지도학습, 비지도학습, 강화학습 이해',
            '각 AI 유형의 활용 분야 파악'
        ]
        self.key_concepts = [
            'AI', 'Machine Learning', 'Deep Learning', '알고리즘', '데이터', 
            '약한 AI', '강한 AI', '지도학습', '비지도학습', '강화학습'
        ]
        self.examples = {
            'beginner': [
                '스마트폰의 음성인식 (Siri, 구글 어시스턴트)',
                '넷플릭스의 영화 추천 시스템',
                '자동차의 내비게이션 시스템',
                '카메라 앱의 얼굴 인식 기능',
                '온라인 쇼핑몰의 상품 추천',
                '게임 AI (체스, 바둑 AI)'
            ],
            'business': [
                '고객 행동 예측 분석',
                '자동화된 고객 서비스 챗봇',
                '공급망 최적화 시스템',
                '금융 사기 탐지 시스템',
                '의료 영상 진단 보조',
                '제조업 품질 관리 자동화'
            ]
        }
    
    def get_chapter_template(self) -> Dict[str, Any]:
        """챕터 1 템플릿 반환"""
        return {
            'title': self.title,
            'objectives': self.objectives,
            'key_concepts': self.key_concepts,
            'examples': self.examples
        }
    
    def generate_section_title(self, objective: str, user_level: str) -> str:
        """섹션 제목 생성"""
        if user_level == 'low':
            # 친근한 제목
            title_map = {
                'AI, ML, DL의 개념과 차이점 이해': '🤖 AI, 머신러닝, 딥러닝이 뭔가요?',
                'AI의 실생활 적용 사례 파악': '📱 우리 주변의 AI 찾아보기',
                'AI 기술의 한계와 가능성 인식': '🔮 AI가 할 수 있는 것과 없는 것',
                '약한 AI와 강한 AI의 구분': '💪 약한 AI vs 강한 AI',
                '지도학습, 비지도학습, 강화학습 이해': '📚 AI가 학습하는 방법들',
                '각 AI 유형의 활용 분야 파악': '🎯 어떤 AI를 언제 사용할까?'
            }
        else:
            # 전문적인 제목
            title_map = {
                'AI, ML, DL의 개념과 차이점 이해': '인공지능, 머신러닝, 딥러닝의 개념 정의',
                'AI의 실생활 적용 사례 파악': '인공지능의 실생활 적용 사례 분석',
                'AI 기술의 한계와 가능성 인식': '인공지능 기술의 현재 한계와 미래 가능성',
                '약한 AI와 강한 AI의 구분': '약한 인공지능과 강한 인공지능의 차이점',
                '지도학습, 비지도학습, 강화학습 이해': '머신러닝의 주요 학습 방법론',
                '각 AI 유형의 활용 분야 파악': 'AI 유형별 적용 분야 및 활용 사례'
            }
        
        return title_map.get(objective, objective)
    
    def generate_section_content(self, objective: str, key_concepts: List[str], 
                                user_type: str, user_level: str) -> str:
        """섹션별 콘텐츠 생성"""
        
        if 'AI, ML, DL' in objective:
            return self._generate_ai_ml_dl_content(user_level)
        elif '실생활 적용' in objective or '사례' in objective:
            return self._generate_application_content(user_level)
        elif '한계' in objective or '가능성' in objective:
            return self._generate_limitations_content(user_level)
        elif '약한 AI' in objective or '강한 AI' in objective:
            return self._generate_ai_types_content(user_level)
        elif '지도학습' in objective or '비지도학습' in objective or '강화학습' in objective:
            return self._generate_learning_types_content(user_level)
        elif '활용 분야' in objective or '유형' in objective:
            return self._generate_application_fields_content(user_level)
        else:
            return f"{objective}에 대한 상세한 설명이 여기에 들어갑니다."
    
    def _generate_ai_ml_dl_content(self, user_level: str) -> str:
        """AI, ML, DL 개념 설명 콘텐츠"""
        if user_level == 'low':
            return """
AI(인공지능)는 컴퓨터가 사람처럼 생각하고 판단할 수 있게 하는 기술입니다.

🤖 **AI (인공지능)**: 컴퓨터가 사람처럼 똑똑하게 행동하는 것
- 예: 스마트폰 음성인식, 번역 앱, 게임 AI
- 특징: 사람의 지능적 행동을 모방

📊 **ML (머신러닝)**: AI의 한 방법으로, 컴퓨터가 데이터를 보고 스스로 학습하는 것
- 예: 넷플릭스가 내가 좋아할 영화를 추천하는 것
- 특징: 경험을 통해 점점 더 똑똑해짐

🧠 **DL (딥러닝)**: 머신러닝의 한 방법으로, 사람의 뇌를 모방한 방식
- 예: 사진에서 얼굴을 찾아내는 것, 자율주행차
- 특징: 복잡한 패턴을 인식할 수 있음

💡 **쉬운 이해**: AI > ML > DL 순서로 포함관계입니다!
- AI가 가장 큰 개념이고, 그 안에 ML이 있고, ML 안에 DL이 있어요
            """
        else:
            return """
인공지능(AI), 머신러닝(ML), 딥러닝(DL)은 서로 연관되어 있지만 구별되는 개념입니다.

**인공지능 (Artificial Intelligence)**
- 정의: 인간의 지능을 모방하여 학습, 추론, 판단 등을 수행하는 컴퓨터 시스템
- 범위: 가장 넓은 개념으로 모든 지능적 행동을 포함
- 역사: 1956년 다트머스 회의에서 용어 최초 사용
- 분류: 약한 AI(특정 작업 수행)와 강한 AI(일반적 지능)

**머신러닝 (Machine Learning)**
- 정의: 명시적 프로그래밍 없이 데이터로부터 패턴을 학습하는 AI의 하위 분야
- 특징: 경험을 통해 성능이 향상되는 알고리즘
- 유형: 지도학습, 비지도학습, 강화학습
- 응용: 추천 시스템, 이미지 분류, 자연어 처리

**딥러닝 (Deep Learning)**
- 정의: 인공신경망을 기반으로 한 머신러닝의 특수한 형태
- 특징: 다층 신경망을 통해 복잡한 패턴 인식 가능
- 구조: 입력층, 은닉층(여러 개), 출력층
- 응용: 이미지 인식, 음성 인식, 자연어 처리

**관계**: AI ⊃ ML ⊃ DL (포함관계)
**발전 과정**: AI(1950년대) → ML(1980년대) → DL(2010년대)
            """
    
    def _generate_application_content(self, user_level: str) -> str:
        """실생활 적용 사례 콘텐츠"""
        if user_level == 'low':
            return """
AI는 이미 우리 일상생활 곳곳에서 활용되고 있어요!

📱 **스마트폰에서**
- 음성인식: "시리야", "오케이 구글"
- 카메라: 얼굴 인식, 자동 초점
- 키보드: 자동 완성, 맞춤법 검사

🏠 **집에서**
- 스마트 스피커: 음악 재생, 날씨 알림
- 넷플릭스: 내가 좋아할 영화 추천
- 온라인 쇼핑: 상품 추천

🚗 **교통에서**
- 내비게이션: 최적 경로 안내
- 지하철 앱: 실시간 도착 정보
- 자율주행차: 스스로 운전하는 차

🎮 **엔터테인먼트**
- 게임 AI: 나와 함께 게임하는 컴퓨터
- 번역 앱: 외국어를 즉시 번역
- 사진 편집: 자동으로 사진을 예쁘게

💡 **놀라운 점**: 우리가 의식하지 못하는 사이에 AI가 우리 생활을 편리하게 만들어주고 있어요!
            """
        else:
            return """
AI 기술은 다양한 산업 분야에서 혁신적인 변화를 이끌고 있습니다.

**의료 분야**
- 의료 영상 진단: X-ray, CT, MRI 영상 분석을 통한 질병 조기 발견
- 신약 개발: AI를 활용한 신약 후보 물질 발견 및 임상시험 최적화
- 개인 맞춤 치료: 환자 데이터 분석을 통한 맞춤형 치료법 제안

**금융 분야**
- 사기 탐지: 실시간 거래 패턴 분석을 통한 이상 거래 탐지
- 신용 평가: 다양한 데이터를 활용한 정확한 신용도 평가
- 알고리즘 트레이딩: AI 기반 자동 투자 시스템

**제조업**
- 품질 관리: 컴퓨터 비전을 활용한 제품 결함 자동 검출
- 예측 정비: 장비 상태 모니터링을 통한 고장 예측 및 예방
- 공급망 최적화: 수요 예측 및 재고 관리 최적화

**교통 및 물류**
- 자율주행: 센서 데이터 분석을 통한 완전 자율주행 기술
- 교통 최적화: 실시간 교통 데이터 분석을 통한 신호 제어
- 배송 최적화: 최적 배송 경로 계산 및 드론 배송

**고객 서비스**
- 챗봇: 자연어 처리를 통한 24시간 고객 상담
- 개인화 추천: 고객 행동 분석을 통한 맞춤형 상품/콘텐츠 추천
- 감정 분석: 고객 피드백 분석을 통한 서비스 개선
            """
    
    def _generate_limitations_content(self, user_level: str) -> str:
        """한계와 가능성 콘텐츠"""
        if user_level == 'low':
            return """
AI는 정말 똑똑하지만, 아직 완벽하지는 않아요.

🚫 **AI가 어려워하는 것들**
- 상식적 판단: 사람에게는 당연한 것도 AI에게는 어려워요
- 창의성: 완전히 새로운 아이디어 만들기는 아직 어려워요
- 감정 이해: 사람의 복잡한 감정을 완전히 이해하기 어려워요
- 윤리적 판단: 옳고 그름을 판단하는 것은 여전히 어려워요

⚠️ **주의할 점**
- 편견: AI도 잘못된 편견을 가질 수 있어요
- 실수: 때로는 틀린 답을 확신에 차서 말할 수 있어요
- 개인정보: 우리의 개인정보를 보호해야 해요

🌟 **미래의 가능성**
- 더 똑똑한 AI: 점점 더 사람처럼 생각할 수 있게 될 거예요
- 새로운 직업: AI와 함께 일하는 새로운 직업들이 생길 거예요
- 편리한 생활: 일상생활이 더욱 편리해질 거예요

💡 **중요한 것**: AI는 도구예요. 사람이 잘 사용하는 것이 중요해요!
            """
        else:
            return """
AI 기술의 현재 한계와 미래 가능성을 균형 있게 이해하는 것이 중요합니다.

**현재 기술의 한계**

1. **일반화 능력 부족**
   - 특정 도메인에서만 우수한 성능 (약한 AI)
   - 새로운 상황에 대한 적응력 제한
   - 상식적 추론 능력의 한계

2. **데이터 의존성**
   - 대량의 고품질 데이터 필요
   - 편향된 데이터로 인한 편향된 결과
   - 데이터가 없는 영역에서의 성능 저하

3. **설명가능성 문제**
   - 블랙박스 문제: 의사결정 과정의 불투명성
   - 결과에 대한 근거 제시의 어려움
   - 신뢰성 확보의 어려움

4. **윤리적 이슈**
   - 알고리즘 편향성 및 차별 문제
   - 개인정보 보호 및 프라이버시 침해
   - 일자리 대체에 따른 사회적 영향

**미래 발전 가능성**

1. **기술적 발전**
   - 강한 AI(AGI) 개발 가능성
   - 더 적은 데이터로 학습하는 효율적 알고리즘
   - 설명가능한 AI(XAI) 기술 발전

2. **응용 분야 확장**
   - 과학 연구 가속화 (신약 개발, 기후 변화 대응)
   - 교육 개인화 및 접근성 향상
   - 창작 및 예술 분야 협업

3. **사회적 변화**
   - 인간-AI 협업 모델 발전
   - 새로운 직업 및 산업 창출
   - 의사결정 지원 시스템 고도화

**균형잡힌 관점**
- AI는 도구이며, 인간의 판단과 윤리적 고려가 필수
- 기술 발전과 함께 규제 및 거버넌스 체계 구축 필요
- 지속적인 교육과 적응을 통한 AI 리터러시 향상 중요
            """
    
    def _generate_ai_types_content(self, user_level: str) -> str:
        """약한 AI vs 강한 AI 콘텐츠"""
        if user_level == 'low':
            return """
AI에도 종류가 있어요! 약한 AI와 강한 AI로 나눌 수 있어요.

💪 **약한 AI (Narrow AI)**
- 특정한 일만 잘하는 AI
- 예시:
  - 체스만 잘하는 AI
  - 번역만 잘하는 AI
  - 음성인식만 잘하는 AI
- 특징: 한 가지는 사람보다 훨씬 잘하지만, 다른 건 못해요

🧠 **강한 AI (General AI)**
- 사람처럼 모든 걸 할 수 있는 AI
- 아직은 존재하지 않아요!
- 특징: 사람처럼 생각하고, 배우고, 창의적일 수 있는 AI

📊 **현재 상황**
- 지금 우리가 사용하는 모든 AI는 약한 AI예요
- ChatGPT, Siri, 알파고 모두 약한 AI예요
- 강한 AI는 언제 나올지 아무도 몰라요

🔮 **미래 전망**
- 과학자들은 강한 AI가 언젠가는 나올 거라고 생각해요
- 하지만 아직은 먼 미래의 이야기예요
- 지금은 약한 AI를 잘 활용하는 것이 중요해요!
            """
        else:
            return """
AI는 능력 범위에 따라 약한 AI(Narrow AI)와 강한 AI(General AI)로 분류됩니다.

**약한 AI (Narrow AI / Weak AI)**
- 정의: 특정 영역에서만 인간 수준 또는 그 이상의 성능을 보이는 AI
- 특징:
  - 단일 작업 또는 제한된 작업 영역에 특화
  - 해당 영역에서는 인간을 능가하는 성능 가능
  - 다른 영역으로의 전이 학습 능력 제한
- 현재 사례:
  - 게임 AI (알파고, 체스 프로그램)
  - 이미지 인식 시스템
  - 자연어 처리 모델 (ChatGPT, BERT)
  - 추천 시스템

**강한 AI (Artificial General Intelligence, AGI)**
- 정의: 인간과 같은 수준의 일반적 지능을 가진 AI
- 특징:
  - 다양한 영역에서 인간 수준의 성능
  - 새로운 상황에 대한 일반화 능력
  - 창의성, 상식적 추론, 감정 이해 등 포함
- 현재 상태: 아직 실현되지 않음

**개발 현황 및 전망**
- 현재: 모든 상용 AI 시스템은 약한 AI
- 연구 동향: AGI 달성을 위한 다양한 접근법 연구 중
- 예상 시기: 전문가들 사이에서도 의견이 분분 (10년~수십 년)
- 도전 과제: 일반화, 상식 추론, 창의성, 의식 등

**사회적 영향**
- 약한 AI: 현재 산업 혁신과 생산성 향상에 기여
- 강한 AI: 실현 시 사회 전반의 근본적 변화 예상
- 윤리적 고려: AGI 개발과 함께 안전성 및 통제 방안 필요
            """
    
    def _generate_learning_types_content(self, user_level: str) -> str:
        """학습 방법론 콘텐츠"""
        if user_level == 'low':
            return """
AI가 학습하는 방법에는 3가지가 있어요!

📚 **지도학습 (Supervised Learning)**
- 선생님이 정답을 알려주면서 가르치는 방법
- 예시: 
  - 고양이 사진을 보여주고 "이건 고양이야"라고 알려줌
  - 이메일을 보여주고 "이건 스팸이야"라고 알려줌
- 특징: 정답이 있는 문제를 푸는 데 좋아요

🔍 **비지도학습 (Unsupervised Learning)**
- 정답을 알려주지 않고 스스로 패턴을 찾게 하는 방법
- 예시:
  - 고객들을 비슷한 그룹으로 나누기
  - 이상한 거래 패턴 찾아내기
- 특징: 숨겨진 패턴을 찾는 데 좋아요

🎮 **강화학습 (Reinforcement Learning)**
- 게임처럼 잘하면 상을 주고, 못하면 벌을 주면서 가르치는 방법
- 예시:
  - 게임 AI: 이기면 점수를 주고, 지면 점수를 빼기
  - 자율주행차: 안전하게 가면 상, 사고나면 벌
- 특징: 시행착오를 통해 최적의 행동을 배워요

💡 **쉬운 비유**
- 지도학습 = 학교에서 선생님과 함께 공부
- 비지도학습 = 혼자서 책을 읽고 패턴 찾기
- 강화학습 = 게임하면서 점수로 배우기
            """
        else:
            return """
머신러닝은 학습 방식에 따라 크게 세 가지로 분류됩니다.

**지도학습 (Supervised Learning)**
- 정의: 입력-출력 쌍으로 구성된 레이블된 데이터로 학습
- 목표: 새로운 입력에 대해 정확한 출력 예측
- 주요 유형:
  - 분류(Classification): 카테고리 예측 (스팸 메일 분류)
  - 회귀(Regression): 연속값 예측 (주가 예측)
- 알고리즘 예시: 선형회귀, 의사결정트리, SVM, 신경망
- 평가 방법: 정확도, 정밀도, 재현율, F1-score 등

**비지도학습 (Unsupervised Learning)**
- 정의: 레이블이 없는 데이터에서 숨겨진 패턴 발견
- 목표: 데이터의 구조나 분포 이해
- 주요 유형:
  - 군집화(Clustering): 유사한 데이터 그룹화 (고객 세분화)
  - 차원축소(Dimensionality Reduction): 데이터 압축 (PCA)
  - 이상탐지(Anomaly Detection): 비정상 패턴 탐지
- 알고리즘 예시: K-means, DBSCAN, PCA, 오토인코더
- 평가 방법: 실루엣 계수, 엘보우 방법 등

**강화학습 (Reinforcement Learning)**
- 정의: 환경과의 상호작용을 통해 보상을 최대화하는 행동 학습
- 구성 요소: 에이전트, 환경, 상태, 행동, 보상
- 학습 과정: 시행착오를 통한 최적 정책 발견
- 주요 개념:
  - 정책(Policy): 상태에서 행동을 선택하는 전략
  - 가치함수(Value Function): 상태나 행동의 가치 평가
- 알고리즘 예시: Q-learning, 정책 경사법, Actor-Critic
- 응용 분야: 게임 AI, 로봇 제어, 자율주행, 추천 시스템

**비교 및 선택 기준**
- 데이터 유형: 레이블 유무에 따른 선택
- 문제 유형: 예측, 패턴 발견, 의사결정 최적화
- 성능 요구사항: 정확도, 해석가능성, 실시간성
- 도메인 특성: 의료, 금융, 게임 등 분야별 특성 고려
            """
    
    def _generate_application_fields_content(self, user_level: str) -> str:
        """활용 분야 콘텐츠"""
        if user_level == 'low':
            return """
AI 유형별로 어떤 곳에서 사용되는지 알아볼까요?

📊 **지도학습이 활용되는 곳**
- 이메일 스팸 필터: 스팸인지 아닌지 구분
- 의료 진단: X-ray 사진으로 병 찾기
- 음성 인식: 말을 글자로 바꾸기
- 번역 앱: 한국어를 영어로 번역

🔍 **비지도학습이 활용되는 곳**
- 온라인 쇼핑: 비슷한 취향의 고객들 그룹 만들기
- 보안: 이상한 해킹 시도 찾아내기
- 마케팅: 고객들의 구매 패턴 분석
- 추천 시스템: 넷플릭스 영화 추천

🎮 **강화학습이 활용되는 곳**
- 게임 AI: 바둑, 체스에서 사람 이기기
- 자율주행차: 안전하게 운전하는 법 배우기
- 로봇: 물건 잡는 법, 걷는 법 배우기
- 광고: 어떤 광고를 보여줄지 결정

💼 **실생활 예시**
- 스마트폰: 지도학습(음성인식) + 비지도학습(사진 정리)
- 넷플릭스: 지도학습(장르 분류) + 비지도학습(추천)
- 게임: 강화학습(AI 플레이어)

💡 **재미있는 점**: 하나의 서비스에서 여러 AI 유형을 함께 사용해요!
            """
        else:
            return """
AI 유형별 활용 분야와 비즈니스 적용 사례를 살펴보겠습니다.

**지도학습 활용 분야**

1. **의료 및 헬스케어**
   - 의료 영상 진단: CT, MRI, X-ray 이미지 분석
   - 약물 효과 예측: 환자 데이터 기반 치료 효과 예측
   - 질병 위험도 평가: 생체 신호 및 검사 결과 분석

2. **금융 서비스**
   - 신용 평가: 고객 데이터 기반 신용도 평가
   - 사기 탐지: 거래 패턴 분석을 통한 이상 거래 탐지
   - 알고리즘 트레이딩: 시장 데이터 기반 투자 결정

3. **자연어 처리**
   - 감정 분석: 고객 리뷰, 소셜미디어 감정 분석
   - 기계 번역: 다국어 번역 서비스
   - 텍스트 분류: 문서 자동 분류 및 태깅

**비지도학습 활용 분야**

1. **마케팅 및 고객 관리**
   - 고객 세분화: 구매 행동 기반 고객 그룹 분류
   - 시장 바구니 분석: 함께 구매되는 상품 패턴 발견
   - 추천 시스템: 협업 필터링 기반 상품 추천

2. **운영 최적화**
   - 이상 탐지: 제조 공정, 네트워크 보안 이상 탐지
   - 데이터 압축: 고차원 데이터의 효율적 저장
   - 패턴 마이닝: 비즈니스 프로세스 최적화

**강화학습 활용 분야**

1. **자율 시스템**
   - 자율주행: 실시간 주행 환경 대응
   - 로봇 제어: 복잡한 작업 수행 학습
   - 드론 내비게이션: 동적 환경에서의 경로 계획

2. **게임 및 엔터테인먼트**
   - 게임 AI: 전략 게임, 실시간 게임 AI
   - 개인화 콘텐츠: 사용자 선호도 기반 콘텐츠 추천
   - 동적 난이도 조절: 사용자 실력에 맞는 게임 난이도

3. **비즈니스 최적화**
   - 자원 할당: 클라우드 리소스, 인력 배치 최적화
   - 가격 책정: 동적 가격 전략 수립
   - 공급망 관리: 재고 최적화 및 배송 경로 계획

**통합 활용 사례**
- **전자상거래**: 지도학습(상품 분류) + 비지도학습(고객 세분화) + 강화학습(추천 최적화)
- **스마트 시티**: 지도학습(교통 예측) + 비지도학습(도시 패턴 분석) + 강화학습(신호 제어)
- **핀테크**: 지도학습(신용 평가) + 비지도학습(사기 패턴 탐지) + 강화학습(포트폴리오 최적화)
            """